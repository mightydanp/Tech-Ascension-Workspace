project.ext.set("mod_group_id", 'com.MightyDanp')
project.ext.set("mod_authors", 'MightyDanp')
project.ext.set("minecraft_version", '1.20.4')
project.ext.set("minecraft_version_range", '[1.20.4,1.21)')
project.ext.set("neo_version", '20.4.151-beta')
project.ext.set("neo_version_range", '[20.4,)')
project.ext.set("loader_version_range", '[2,)')
project.ext.set("jei_version", '17.3.0.48')

ext.getChangelogText =  {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${mod_name} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

ext.repos = {
    repositories {
        mavenLocal()
        maven { url "https://maven.blamejared.com" }    // Patchouli, bookshelf, gamestages, JEI
        maven { url "https://dvs1.progwml6.com/files/maven" } // JEI
        maven { url "https://maven.k-4u.nl" } // McJtyLib, TOP
        maven { url 'https://maven.minecraftforge.net/' } // Serene Seasons
        maven { url "https://maven.theillusivec4.top/" } // Curios
    }
}

ext.mc = {
    dependencies.implementation "net.neoforged:neoforge:${neo_version}"
}

ext.jei = {
    dependencies.compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    dependencies.compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    dependencies.runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

ext.modrinth = { opt, req, versions ->
    tasks.modrinth.enabled = project.hasProperty('modrinth_token')
    modrinth {
        if (project.hasProperty('modrinth_token')) {
            token = project.modrinth_token
        }
        projectId = project.projectSlug
        versionType = project.curse_type
        versionName = "${mod_name} - ${version}"
        uploadFile = jar
        gameVersions = [project.minecraft_version] + versions
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        dependencies {
            opt.each { lib ->
                optional.project lib
            }
            req.each { lib ->
                required.project lib
            }
        }
    }
}

ext.cfdeps = { optional, required, versions ->
    tasks.curseforge.enabled = project.hasProperty('curseforge_key')
    curseforge {
        if (project.hasProperty('curseforge_key')) {
            apiKey = project.curseforge_key
        }

        project {
            id = project.projectId
            changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
            changelogType = 'html'
            releaseType = project.curse_type
            addGameVersion project.minecraft_version
            versions.each { v ->
                addGameVersion v
            }
            mainArtifact(jar) {
                displayName = "${mod_name} - ${version}"
            }
            relations {
                optional.each { lib ->
                    optionalLibrary lib
                }
                required.each { lib ->
                    requiredDependency lib
                }
            }
        }
    }
}

ext.at = {
    minecraft {
        accessTransformers {
            file('src/main/resources/META-INF/accesstransformer.cfg')
        }
    }
}

ext.runs = {
    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'
            modSource project.sourceSets.main
        }

        client {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
            programArgument '--nogui'
        }

        gameTestServer {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }
}

ext.jars = {
    jar {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        manifest {
            attributes([
                    "Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : project.mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : project.mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

ext.publish = {
    // Example configuration to allow publishing using the maven-publish task
    // we define a custom artifact that is sourced from the reobfJar output task
    // and then declare that to be published
    // Note you'll need to add a repository here
    def reobfFile = file("$buildDir/reobfJar/output.jar")
    def reobfArtifact = artifacts.add('default', reobfFile) {
        type 'jar'
        builtBy 'reobfJar'
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact reobfArtifact
            }
        }
        repositories {
            maven {
                url "file:///${project.projectDir}/mcmodsrepo"
            }
        }
    }
}

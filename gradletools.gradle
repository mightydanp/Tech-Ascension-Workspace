ext.getChangelogText =  {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

ext.repos = {
    repositories {
        maven { url "https://maven.blamejared.com" }    // Patchouli, bookshelf, gamestages, JEI
        //maven { url "https://dvs1.progwml6.com/files/maven" } // JEI
        maven { url "https://modmaven.dev/" } // McJtyLib, TOP
        maven { url 'https://maven.minecraftforge.net/' } // Serene Seasons
        maven { url "https://maven.theillusivec4.top/" } // Curios
    }
}

ext.parch = {
    dependencies {
        subsystems {
            parchment {
                minecraftVersion = rootProject.findProperty('parchment_minecraft_version')
                mappingsVersion = rootProject.findProperty('parchment_version')
            }
        }
    }
}

ext.mc = {
    dependencies.minecraft "net.minecraftforge:forge:${rootProject.findProperty('minecraft_version')}-${rootProject.findProperty('forge_version')}"

}

ext.jei = {
    dependencies.compileOnly fg.deobf("mezz.jei:jei-${rootProject.findProperty('minecraft_version')}-common-api:${rootProject.findProperty('jei_version')}")
    dependencies.compileOnly fg.deobf("mezz.jei:jei-${rootProject.findProperty('minecraft_version')}-forge-api:${rootProject.findProperty('jei_version')}")
    dependencies.runtimeOnly fg.deobf("mezz.jei:jei-${rootProject.findProperty('minecraft_version')}-forge:${rootProject.findProperty('jei_version')}")
}

ext.runs = { name ->
    minecraft {
        //mappings channel: 'parchment', version: "${rootProject.findProperty('parchment_version')}-${rootProject.findProperty('parchment_minecraft_version')}"
        mappings channel: rootProject.findProperty('mapping_channel'), version: rootProject.findProperty('mapping_version')
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

        runs {
            client = {
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
                properties 'forge.logging.markers': ''
                properties 'forge.logging.console.level': 'debug'
                workingDirectory project.file('run').canonicalPath
                source sourceSets.main
            }
            server = {
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
                properties 'forge.logging.markers': ''
                properties 'forge.logging.console.level': 'debug'
                workingDirectory project.file('run').canonicalPath
                source sourceSets.main
            }
            data = {
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
                workingDirectory project.file('run').canonicalPath
                property 'forge.logging.markers', ''
                property 'forge.logging.console.level', 'debug'
                args '--mod', name, '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
                source sourceSets.main
            }
        }
    }
}

ext.jars = {
    jar {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        manifest {
            attributes([
                    "Specification-Title"     : project.findProperty('mod_id'),
                    "Specification-Vendor"    : project.findProperty('mod_authors'),
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : project.findProperty('mod_authors'),
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

ext.publish = {
    // Example configuration to allow publishing using the maven-publish task
    // we define a custom artifact that is sourced from the reobfJar output task
    // and then declare that to be published
    // Note you'll need to add a repository here
    def reobfFile = file("$buildDir/reobfJar/output.jar")
    def reobfArtifact = artifacts.add('default', reobfFile) {
        type 'jar'
        builtBy 'reobfJar'
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact reobfArtifact
            }
        }
        repositories {
            maven {
                url "file:///${project.projectDir}/mcmodsrepo"
            }
        }
    }
}

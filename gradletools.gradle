project.ext.set("minecraft_version", '1.21.1')
project.ext.set("forge_version", '52.1.3')
project.ext.set("parchment_version", '2025.08.07-1.21.1')
project.ext.set("jei_version", '19.21.2.313')
project.ext.set("owner", 'MightyDanp')

ext.mc = {
    dependencies.minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

ext.repos = {
    repositories {
        maven { url "https://dvs1.progwml6.com/files/maven" } // JEI
        maven { url "https://maven.blamejared.com" }
        maven { url "https://modmaven.dev" } // Patchouli
        maven { url "https://maven.k-4u.nl" } // McJtyLib, TOP
        maven { url "https://maven.theillusivec4.top/" }// Curios
    }
}

ext.jei = {
    //dependencies.compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    dependencies.compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    dependencies.runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
}

ext.runs = { name ->
    minecraft {
        //mappings channel: 'parchment', version: "${parchment_version}"
        mappings channel: 'official', version: "${minecraft_version}"
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

        runs {
            client = {
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
                properties 'forge.logging.markers': ''
                properties 'forge.logging.console.level': 'debug'
                workingDirectory project.file('run').canonicalPath
                source sourceSets.main
            }
            server = {
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
                properties 'forge.logging.markers': ''
                properties 'forge.logging.console.level': 'debug'
                workingDirectory project.file('run').canonicalPath
                source sourceSets.main
            }
            data = {
                property 'mixin.env.remapRefMap', 'true'
                property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
                workingDirectory project.file('run').canonicalPath
                property 'forge.logging.markers', ''
                property 'forge.logging.console.level', 'debug'
                args '--mod', name, '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
                source sourceSets.main
            }
        }
    }
}

ext.jars = { name ->
    jar {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        manifest {
            attributes 'FMLAT': 'accesstransformer.cfg',
            "Specification-Title": name,
            "Specification-Vendor": "${owner}",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${owner}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        }
    }
}

ext.publish = {
    // Example configuration to allow publishing using the maven-publish task
    // we define a custom artifact that is sourced from the reobfJar output task
    // and then declare that to be published
    // Note you'll need to add a repository here
    def reobfFile = file("$buildDir/reobfJar/output.jar")
    def reobfArtifact = artifacts.add('default', reobfFile) {
        type 'jar'
        builtBy 'reobfJar'
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact reobfArtifact
            }
        }
        repositories {
            maven {
                url "file:///${project.projectDir}/mcmodsrepo"
            }
        }
    }
}
